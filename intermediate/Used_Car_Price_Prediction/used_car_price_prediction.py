# -*- coding: utf-8 -*-
"""Used_Car_Price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12AYRM1S3Tk20YCB2r95CSFPUKJRKyQVE
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# For model building
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Display settings
pd.set_option('display.max_columns', None)
sns.set(style="whitegrid")

# Load the dataset
df = pd.read_csv('https://raw.githubusercontent.com/ShuklaPrashant21/Used-Car-Price-Prediction/refs/heads/master/car%20data.csv')  # Make sure to replace with your actual file name
df.head()

# Get basic info about the dataset
df.info()

# Check for missing values
print("\nMissing values in each column:")
print(df.isnull().sum())

# Summary statistics
df.describe()

# Rename misaligned column (if needed)
df.rename(columns={"Owne": "Owner"}, inplace=True)

# Display unique values in categorical columns to understand data
print("Fuel Types:", df['Fuel_Type'].unique())
print("Seller Types:", df['Seller_Type'].unique())
print("Transmission Types:", df['Transmission'].unique())
print("Owner Types:", df['Owner'].unique())

from sklearn.preprocessing import LabelEncoder

# Encode categorical variables
le_fuel = LabelEncoder()
le_seller = LabelEncoder()
le_trans = LabelEncoder()

df['Fuel_Type'] = le_fuel.fit_transform(df['Fuel_Type'])
df['Seller_Type'] = le_seller.fit_transform(df['Seller_Type'])
df['Transmission'] = le_trans.fit_transform(df['Transmission'])

# Display a sample after encoding
df.head()

from sklearn.model_selection import train_test_split

# Features and target
X = df.drop(['Selling_Price', 'Car_Name'], axis=1)
y = df['Selling_Price']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error

# Model initialization and training
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"R² Score: {r2}")
print(f"Mean Squared Error: {mse}")

import matplotlib.pyplot as plt
import seaborn as sns

# Get feature importances
importances = model.feature_importances_
feature_names = X.columns

# Create a DataFrame for visualization
feat_imp_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

# Plotting
plt.figure(figsize=(10,6))
sns.barplot(x='Importance', y='Feature', data=feat_imp_df, palette='viridis')
plt.title('Feature Importance')
plt.tight_layout()
plt.show()

import pickle

# Save the model to a file
with open('used_car_price_model.pkl', 'wb') as file:
    pickle.dump(model, file)

print("Model saved as used_car_price_model.pkl")

# Load the model from file
with open('used_car_price_model.pkl', 'rb') as file:
    loaded_model = pickle.load(file)

# Example input (you can change these values to test)
sample_input = np.array([[2011, 5.59, 27000, 0, 3, 2, 0]])  # Example: [Year, Present_Price, Kms_Driven, Fuel_Diesel, Fuel_Petrol, Seller_Individual, Transmission_Manual]

# Predict
predicted_price = loaded_model.predict(sample_input)

print(f"Predicted Selling Price: ₹{predicted_price[0]:.2f} lakhs")